package TicTacToeGame;

import java.awt.Color;
import java.util.*;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * The frame players will see when they play the game
 */

public class GameBoard extends javax.swing.JFrame {

    private GameDataModel myModel;

    //Creates new form GameBoard
    public GameBoard(GameDataModel myModel) {
        this.myModel = myModel;
        initComponents();
        getContentPane().setBackground(new Color(121, 208, 195));
        refreshLabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelTurn = new javax.swing.JLabel();
        jLayeredPaneTTT = new javax.swing.JLayeredPane();
        jButtonTopRight = new javax.swing.JButton();
        jButtonMiddleLeft = new javax.swing.JButton();
        jButtonTopLeft = new javax.swing.JButton();
        jButtonTopMiddle = new javax.swing.JButton();
        jButtonCenter = new javax.swing.JButton();
        jButtonMiddleRight = new javax.swing.JButton();
        jButtonBottomLeft = new javax.swing.JButton();
        jButtonBottomMiddle = new javax.swing.JButton();
        jButtonBottomRight = new javax.swing.JButton();
        jLabelGrid = new javax.swing.JLabel();
        jButtonNextRound = new javax.swing.JButton();
        jButtonQuit = new javax.swing.JButton();
        RoundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Tic Tac Toe");

        jLabelTurn.setText("Player X Turn");

        jButtonTopRight.setBorderPainted(false);
        jButtonTopRight.setFocusPainted(false);
        jButtonTopRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopRightActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonTopRight);
        jButtonTopRight.setBounds(220, 30, 32, 69);

        jButtonMiddleLeft.setBorderPainted(false);
        jButtonMiddleLeft.setFocusPainted(false);
        jButtonMiddleLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMiddleLeftActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonMiddleLeft);
        jButtonMiddleLeft.setBounds(30, 130, 32, 72);

        jButtonTopLeft.setBorderPainted(false);
        jButtonTopLeft.setFocusPainted(false);
        jButtonTopLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopLeftActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonTopLeft);
        jButtonTopLeft.setBounds(30, 30, 32, 69);

        jButtonTopMiddle.setBorderPainted(false);
        jButtonTopMiddle.setFocusPainted(false);
        jButtonTopMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopMiddleActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonTopMiddle);
        jButtonTopMiddle.setBounds(130, 30, 32, 69);

        jButtonCenter.setBorderPainted(false);
        jButtonCenter.setFocusPainted(false);
        jButtonCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCenterActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonCenter);
        jButtonCenter.setBounds(130, 130, 32, 72);

        jButtonMiddleRight.setBorderPainted(false);
        jButtonMiddleRight.setFocusPainted(false);
        jButtonMiddleRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMiddleRightActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonMiddleRight);
        jButtonMiddleRight.setBounds(220, 130, 32, 72);

        jButtonBottomLeft.setBorderPainted(false);
        jButtonBottomLeft.setFocusPainted(false);
        jButtonBottomLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomLeftActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonBottomLeft);
        jButtonBottomLeft.setBounds(30, 220, 32, 70);

        jButtonBottomMiddle.setBorderPainted(false);
        jButtonBottomMiddle.setFocusPainted(false);
        jButtonBottomMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomMiddleActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonBottomMiddle);
        jButtonBottomMiddle.setBounds(130, 220, 32, 70);

        jButtonBottomRight.setBorderPainted(false);
        jButtonBottomRight.setFocusPainted(false);
        jButtonBottomRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomRightActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonBottomRight);
        jButtonBottomRight.setBounds(220, 220, 32, 70);

        jLabelGrid.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/Grid.png"))); // NOI18N
        jLayeredPaneTTT.add(jLabelGrid);
        jLabelGrid.setBounds(20, 10, 307, 302);

        jButtonNextRound.setText("Next Round");
        jButtonNextRound.setEnabled(false);
        jButtonNextRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextRoundActionPerformed(evt);
            }
        });

        jButtonQuit.setText("Quit");
        jButtonQuit.setEnabled(false);
        jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitActionPerformed(evt);
            }
        });

        RoundLabel.setText("Round 1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButtonQuit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonNextRound)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabelTurn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLayeredPaneTTT, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(RoundLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel1)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabelTurn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RoundLabel)
                .addGap(10, 10, 10)
                .addComponent(jLayeredPaneTTT, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNextRound)
                    .addComponent(jButtonQuit))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTopLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(0, jButtonTopLeft);
        }
    }//GEN-LAST:event_jButtonTopLeftActionPerformed

    private void jButtonTopMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopMiddleActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(1, jButtonTopMiddle);
        }
    }//GEN-LAST:event_jButtonTopMiddleActionPerformed

    private void jButtonTopRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(2, jButtonTopRight);
        }
    }//GEN-LAST:event_jButtonTopRightActionPerformed

    private void jButtonMiddleLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMiddleLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(3, jButtonMiddleLeft);
        }
    }//GEN-LAST:event_jButtonMiddleLeftActionPerformed

    private void jButtonCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCenterActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(4, jButtonCenter);
        }
    }//GEN-LAST:event_jButtonCenterActionPerformed

    private void jButtonMiddleRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMiddleRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(5, jButtonMiddleRight);
        }
    }//GEN-LAST:event_jButtonMiddleRightActionPerformed

    private void jButtonBottomLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(6, jButtonBottomLeft);
        }
    }//GEN-LAST:event_jButtonBottomLeftActionPerformed

    private void jButtonBottomMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomMiddleActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(7, jButtonBottomMiddle);
        }
    }//GEN-LAST:event_jButtonBottomMiddleActionPerformed

    private void jButtonBottomRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(8, jButtonBottomRight);
        }
    }//GEN-LAST:event_jButtonBottomRightActionPerformed

    private void jButtonNextRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextRoundActionPerformed
        myModel.startNewRound();

    }//GEN-LAST:event_jButtonNextRoundActionPerformed

    private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitActionPerformed
        // Changes frame to close gameBoard and open EndJFrame
        EndJFrame endFrame = new EndJFrame(myModel);
        endFrame.endOfRounds();
        endFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonQuitActionPerformed

    //Switch the token from a black image to a red image
    private void setButtonRed(Token t, javax.swing.JButton button) {
        if (t == Token.O) {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon_Red.png")));
        } else {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon_Red.png")));
        }
    }

    public void buttonAction(int index, javax.swing.JButton button) {
   
        // Try to change the token
        if (!myModel.changeToken(index)) {
            return;
        }

        // changed token, so update image
        if (myModel.getToken(index) == Token.O) {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
        } else {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

        }

        // check to see if game is won
        if (myModel.isGameOver()) {
            Token t = myModel.getToken(index);
            if(myModel.getTurnCounter() < 9){
               updateColor(t); 
            }
        }

        // update label
        refreshLabel();

        // if it's now the computer's turn call that method
        if (!myModel.isP1Turn() && !myModel.isTwoPlayers()) {
            computerTurn();
        }
    }

    //Updates colors of winning row/column/diagonal line
    public void updateColor(Token t) {
        if (myModel.getWin() == Win.BOT_ROW) {
            this.setButtonRed(t, jButtonBottomLeft);
            this.setButtonRed(t, jButtonBottomRight);
            this.setButtonRed(t, jButtonBottomMiddle);
        }
        if (myModel.getWin() == Win.MID_ROW) {
            this.setButtonRed(t, jButtonMiddleLeft);
            this.setButtonRed(t, jButtonMiddleRight);
            this.setButtonRed(t, jButtonCenter);
        }
        if (myModel.getWin() == Win.TOP_ROW) {
            this.setButtonRed(t, jButtonTopLeft);
            this.setButtonRed(t, jButtonTopRight);
            this.setButtonRed(t, jButtonTopMiddle);
        }
        if (myModel.getWin() == Win.LEFT_COL) {
            this.setButtonRed(t, jButtonMiddleLeft);
            this.setButtonRed(t, jButtonTopLeft);
            this.setButtonRed(t, jButtonBottomLeft);
        }
        if (myModel.getWin() == Win.RIGHT_COL) {
            this.setButtonRed(t, jButtonMiddleRight);
            this.setButtonRed(t, jButtonTopRight);
            this.setButtonRed(t, jButtonBottomRight);
        }
        if (myModel.getWin() == Win.MID_COL) {
            this.setButtonRed(t, jButtonTopMiddle);
            this.setButtonRed(t, jButtonCenter);
            this.setButtonRed(t, jButtonBottomMiddle);
        }
        if (myModel.getWin() == Win.DIAG1) {
            this.setButtonRed(t, jButtonCenter);
            this.setButtonRed(t, jButtonTopLeft);
            this.setButtonRed(t, jButtonBottomRight);
        }
        if (myModel.getWin() == Win.DIAG2) {
            this.setButtonRed(t, jButtonCenter);
            this.setButtonRed(t, jButtonTopRight);
            this.setButtonRed(t, jButtonBottomLeft);
        }
    }

    public void computerTurn() {
            
            //Generate a random integer
            Random rand = new Random();
            int index = rand.nextInt(9);
            javax.swing.JButton button = jButtonTopLeft;
            boolean weWon = false;
            
            //Make sure that the space has not been chosen yet
            while(!myModel.isSpaceBlank(index)){
                index = rand.nextInt(8);
            }
            
            //Strategy : if the computer has two and can make a line, we make the line
            //I know I should've done this in a loop, but I kept getting runtime errors
            if(myModel.getToken(0) == Token.O && myModel.getToken(1) == Token.O && myModel.isSpaceBlank(2)){
                index = 2;
                weWon = true;
            }
            if(myModel.getToken(0) == Token.O && myModel.getToken(4) == Token.O && myModel.isSpaceBlank(8)){
                index = 8;
                weWon = true;
            }
            if(myModel.getToken(0) == Token.O && myModel.getToken(3) == Token.O && myModel.isSpaceBlank(6)){
                index = 6;
                weWon = true;
            }
            if(myModel.getToken(1) == Token.O && myModel.getToken(2) == Token.O && myModel.isSpaceBlank(0)){
                index = 0;
                weWon = true;
            }
            if(myModel.getToken(1) == Token.O && myModel.getToken(4) == Token.O && myModel.isSpaceBlank(7)){
                index = 7;
                weWon = true;
            }
            if(myModel.getToken(2) == Token.O && myModel.getToken(4) == Token.O && myModel.isSpaceBlank(6)){
                index = 6;
                weWon = true;
            }
            if(myModel.getToken(2) == Token.O && myModel.getToken(5) == Token.O && myModel.isSpaceBlank(8)){
                index = 8;
                weWon = true;
            }
            if(myModel.getToken(3) == Token.O && myModel.getToken(6) == Token.O && myModel.isSpaceBlank(0)){
                index = 0;
                weWon = true;
            }
            if(myModel.getToken(3) == Token.O && myModel.getToken(4) == Token.O && myModel.isSpaceBlank(5)){
                index = 5;
                weWon = true;
            }
            if(myModel.getToken(4) == Token.O && myModel.getToken(5) == Token.O && myModel.isSpaceBlank(3)){
                index = 3;
                weWon = true;
            }
            if(myModel.getToken(4) == Token.O && myModel.getToken(7) == Token.O && myModel.isSpaceBlank(1)){
                index = 1;
                weWon = true;
            }
            if(myModel.getToken(4) == Token.O && myModel.getToken(8) == Token.O && myModel.isSpaceBlank(0)){
                index = 0;
                weWon = true;
            }
            if(myModel.getToken(4) == Token.O && myModel.getToken(6) == Token.O && myModel.isSpaceBlank(2)){
                index = 2;
                weWon = true;
            }
            if(myModel.getToken(5) == Token.O && myModel.getToken(8) == Token.O && myModel.isSpaceBlank(2)){
                index = 2;
                weWon = true;
            }
            if(myModel.getToken(6) == Token.O && myModel.getToken(7) == Token.O && myModel.isSpaceBlank(8)){
                index = 8;
                weWon = true;
            }
            if(myModel.getToken(7) == Token.O && myModel.getToken(8) == Token.O && myModel.isSpaceBlank(6)){
                index = 6;
                weWon = true;
            }
            if(myModel.getToken(0) == Token.O && myModel.getToken(8) == Token.O && myModel.isSpaceBlank(4)){
                index = 4;
                weWon = true;
            }
            if(myModel.getToken(0) == Token.O && myModel.getToken(6) == Token.O && myModel.isSpaceBlank(3)){
                index = 3;
                weWon = true;
            }
            if(myModel.getToken(0) == Token.O && myModel.getToken(2) == Token.O && myModel.isSpaceBlank(1)){
                index = 1;
                weWon = true;
            }
            if(myModel.getToken(1) == Token.O && myModel.getToken(7) == Token.O && myModel.isSpaceBlank(4)){
                index = 4;
                weWon = true;
            }
            if(myModel.getToken(2) == Token.O && myModel.getToken(8) == Token.O && myModel.isSpaceBlank(5)){
                index = 5;
                weWon = true;
            }
            if(myModel.getToken(2) == Token.O && myModel.getToken(6) == Token.O && myModel.isSpaceBlank(4)){
                index = 4;
                weWon = true;
            }
            if(myModel.getToken(3) == Token.O && myModel.getToken(5) == Token.O && myModel.isSpaceBlank(4)){
                index = 4;
                weWon = true;
            }
            if(myModel.getToken(6) == Token.O && myModel.getToken(8) == Token.O && myModel.isSpaceBlank(7)){
                index = 7;
                weWon = true;
            }
            
            //Strategy : if the user has two and can make a line, we stop them
            //Will only happen if we don't have a way to win
            //I know I should've done this in a loop, but I kept getting runtime errors
            if(weWon == false){
                if(myModel.getToken(0) == Token.X && myModel.getToken(1) == Token.X && myModel.isSpaceBlank(2)){
                    index = 2;
                }
                if(myModel.getToken(0) == Token.X && myModel.getToken(4) == Token.X && myModel.isSpaceBlank(8)){
                    index = 8;
                }
                if(myModel.getToken(0) == Token.X && myModel.getToken(3) == Token.X && myModel.isSpaceBlank(6)){
                    index = 6;
                }
                if(myModel.getToken(1) == Token.X && myModel.getToken(2) == Token.X && myModel.isSpaceBlank(0)){
                    index = 0;
                }
                if(myModel.getToken(1) == Token.X && myModel.getToken(4) == Token.X && myModel.isSpaceBlank(7)){
                    index = 7;
                }
                if(myModel.getToken(2) == Token.X && myModel.getToken(4) == Token.X && myModel.isSpaceBlank(6)){
                    index = 6;
                }
                if(myModel.getToken(2) == Token.X && myModel.getToken(5) == Token.X && myModel.isSpaceBlank(8)){
                    index = 8;
                }
                if(myModel.getToken(3) == Token.X && myModel.getToken(6) == Token.X && myModel.isSpaceBlank(0)){
                    index = 0;
                }
                if(myModel.getToken(3) == Token.X && myModel.getToken(4) == Token.X && myModel.isSpaceBlank(5)){
                    index = 5;
                }
                if(myModel.getToken(4) == Token.X && myModel.getToken(5) == Token.X && myModel.isSpaceBlank(3)){
                    index = 3;
                }
                if(myModel.getToken(4) == Token.X && myModel.getToken(7) == Token.X && myModel.isSpaceBlank(1)){
                    index = 1;
                }
                if(myModel.getToken(4) == Token.X && myModel.getToken(6) == Token.X && myModel.isSpaceBlank(2)){
                    index = 2;
                }
                if(myModel.getToken(4) == Token.X && myModel.getToken(8) == Token.X && myModel.isSpaceBlank(0)){
                    index = 0;
                }
                if(myModel.getToken(5) == Token.X && myModel.getToken(8) == Token.X && myModel.isSpaceBlank(2)){
                    index = 2;
                }
                if(myModel.getToken(6) == Token.X && myModel.getToken(7) == Token.X && myModel.isSpaceBlank(8)){ 
                    index = 8;
                }
                if(myModel.getToken(7) == Token.X && myModel.getToken(8) == Token.X && myModel.isSpaceBlank(6)){
                    index = 6;
                }
                if(myModel.getToken(0) == Token.X && myModel.getToken(8) == Token.X && myModel.isSpaceBlank(4)){
                    index = 4;
                }
                if(myModel.getToken(0) == Token.X && myModel.getToken(6) == Token.X && myModel.isSpaceBlank(3)){
                    index = 3;
                }
                if(myModel.getToken(0) == Token.X && myModel.getToken(2) == Token.X && myModel.isSpaceBlank(1)){
                    index = 1;
                }
                if(myModel.getToken(1) == Token.X && myModel.getToken(7) == Token.X && myModel.isSpaceBlank(4)){
                    index = 4;
                }
                if(myModel.getToken(2) == Token.X && myModel.getToken(8) == Token.X && myModel.isSpaceBlank(5)){
                    index = 5;
                }
                if(myModel.getToken(2) == Token.X && myModel.getToken(6) == Token.X && myModel.isSpaceBlank(4)){
                    index = 4;
                }
                if(myModel.getToken(3) == Token.X && myModel.getToken(5) == Token.X && myModel.isSpaceBlank(4)){
                    index = 4;
                }
                if(myModel.getToken(6) == Token.X && myModel.getToken(8) == Token.X && myModel.isSpaceBlank(7)){
                    index = 7;
                }
            }
           
            // Try to change the token
            if (!myModel.changeToken(index)) {
                return;
            }
            
            //Change the variable to the correct button
            if(index == 0){
                button = jButtonTopLeft;
            }
            if(index == 1){
                button = jButtonTopMiddle;
            }
            if(index == 2){
                button = jButtonTopRight;
            }
            if(index == 3){
                button = jButtonMiddleLeft;
            }
            if(index == 4){
                button = jButtonCenter;
            }
            if(index == 5){
                button = jButtonMiddleRight;
            }
            if(index == 6){
                button = jButtonBottomLeft;
            }
            if(index == 7){
                button = jButtonBottomMiddle;
            }
            if(index == 8){
                button = jButtonBottomRight;
            }
            
            // changed token, so update image
            if (myModel.getToken(index) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));
                
            }
            
            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(index);
                if(myModel.getTurnCounter() < 9){
                    updateColor(t);
                }
            }
            
            // update label
            refreshLabel();
        } 

    //refresh the label so it states who won and enable the quit and next round buttons
    public void refreshLabel() {
        // pause for a bit
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        if (myModel.isGameOver()) {
            // See if it was a tied game 
            if(myModel.getTurnCounter() == 9){
                jLabelTurn.setText("Tied game");
            }
            
            // If not a tied game, get who wins, set label, and add to their winning counter
            else{
                if (myModel.isP1Turn()) {
                    jLabelTurn.setText(myModel.getP1().getName() + " wins!!!");
                    myModel.getP1().setRoundsWon(myModel.getP1().getRoundsWon() + 1);
                } else {
                    jLabelTurn.setText(myModel.getP2().getName() + " wins!!!");
                    myModel.getP2().setRoundsWon(myModel.getP2().getRoundsWon() + 1);
                }
            }
            jButtonQuit.setEnabled(true);
            jButtonNextRound.setEnabled(true);
            return;
        }
    
        // update player label 
        if (myModel.isP1Turn()) {
            jLabelTurn.setText(myModel.getP1().getName() + "'s turn.");
        } else {
            jLabelTurn.setText(myModel.getP2().getName() + "'s turn.");
        }
    }
    
    // tells the player what round it is
    public void updateRoundLabel(){
        RoundLabel.setText("Round " + myModel.getGameCounter());
        
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RoundLabel;
    private javax.swing.JButton jButtonBottomLeft;
    private javax.swing.JButton jButtonBottomMiddle;
    private javax.swing.JButton jButtonBottomRight;
    private javax.swing.JButton jButtonCenter;
    private javax.swing.JButton jButtonMiddleLeft;
    private javax.swing.JButton jButtonMiddleRight;
    private javax.swing.JButton jButtonNextRound;
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JButton jButtonTopLeft;
    private javax.swing.JButton jButtonTopMiddle;
    private javax.swing.JButton jButtonTopRight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelGrid;
    private javax.swing.JLabel jLabelTurn;
    private javax.swing.JLayeredPane jLayeredPaneTTT;
    // End of variables declaration//GEN-END:variables
}
